// Code generated by sqlc. DO NOT EDIT.
// source: genre.sql

package db

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres
    (
    name, description
    )
VALUES
    (
        $1, $2
)
RETURNING id, name, description
`

type CreateGenreParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateGenre(ctx context.Context, arg CreateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, createGenre, arg.Name, arg.Description)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres
WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, id)
	return err
}

const getGenre = `-- name: GetGenre :one
SELECT id, name, description
FROM genres
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGenre(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenre, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listGenres = `-- name: ListGenres :many
SELECT id, name, description
FROM genres
ORDER BY id
LIMIT $1
OFFSET
$2
`

type ListGenresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGenres(ctx context.Context, arg ListGenresParams) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, listGenres, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genres
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdateGenreParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenre, arg.ID, arg.Name, arg.Description)
	var i Genre
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
